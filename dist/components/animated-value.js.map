{"version":3,"file":"animated-value.js","sources":["../../src/components/animated-value.hbs","../../src/components/animated-value.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{#animated-each this.items key=this.key rules=this.rules use=this.use duration=this.duration group=this.group watch=this.watch initialInsertion=this.initialInsertion finalRemoval=this.finalRemoval as |item|}}\\n  {{yield item}}\\n{{/animated-each}}\\n\")","import { computed } from '@ember/object';\nimport Component from '@ember/component';\nimport { A } from '@ember/array';\n\nimport type { AnimatedEachSignature } from './animated-each.ts';\n\ninterface AnimatedValueSignature<T> {\n  Args: {\n    Positional: [T];\n    Named: AnimatedEachSignature<[T]>['Args']['Named'];\n  };\n  Blocks: {\n    default: [T];\n  };\n}\n\n/**\n  A component that animates when a single value changes.\n  Animated-value uses the same arguments as animated-each.\n  ```hbs\n    <AnimatedContainer>\n      {{#animated-value this.counter rules=this.rules duration=100 as |v|}}\n          <span class=\"numbers\">{{v}}</span>\n      {{/animated-value}}\n    </AnimatedContainer>\n\n    <button {{action \"increment\"}}>+</button>\n    <button {{action \"decrement\"}}>-</button>\n  ```\n  ```js\n  import Component from '@ember/component';\n  import { toLeft, toRight } from 'ember-animated/transitions/move-over';\n\n  export default Component.extend({\n    rules({ oldItems, newItems }) {\n      if (oldItems[0] < newItems[0]) {\n        return toLeft;\n      } else {\n        return toRight;\n      }\n    },\n\n    counter: 10,\n\n    actions: {\n      increment() {\n        this.set('counter', this.get('counter') + 1);\n      },\n      decrement() {\n        this.set('counter', this.get('counter') - 1);\n      }\n    }\n  });\n  ```\n  @class animated-value\n  @public\n*/\n\nexport default class AnimatedValueComponent<T> extends Component<\n  AnimatedValueSignature<T>\n> {\n  /**\n   * The data you are trying to render.\n    @argument items\n    @type unknown\n  */\n  value!: T;\n\n  tagName = '';\n\n  finalRemoval: AnimatedEachSignature<T>['Args']['Named']['finalRemoval'];\n  initialInsertion: AnimatedEachSignature<T>['Args']['Named']['initialInsertion'];\n  watch: AnimatedEachSignature<T>['Args']['Named']['watch'];\n  key: AnimatedEachSignature<T>['Args']['Named']['key'];\n  group: AnimatedEachSignature<T>['Args']['Named']['group'];\n  rules: AnimatedEachSignature<T>['Args']['Named']['rules'];\n  use: AnimatedEachSignature<T>['Args']['Named']['use'];\n  duration: AnimatedEachSignature<T>['Args']['Named']['duration'];\n\n  static positionalParams = ['value'];\n\n  @computed('value')\n  get items(): T[] {\n    return A([this.value]);\n  }\n}\n"],"names":["AnimatedValueComponent","Component","value","tagName","finalRemoval","initialInsertion","watch","key","group","rules","use","duration","positionalParams","items","A","m","this","computed","setComponentTemplate","TEMPLATE"],"mappings":";;;;;;AACA,eAAe,kBAAkB,CAAC,2PAA2P;;ACe7R;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,MAAMA,sBAAsB,SAAYC,SAAS,CAE9D;AACA;AACF;AACA;AACA;AACA;EACEC,KAAK,CAAA;AAELC,EAAAA,OAAO,GAAG,EAAE,CAAA;EAEZC,YAAY,CAAA;EACZC,gBAAgB,CAAA;EAChBC,KAAK,CAAA;EACLC,GAAG,CAAA;EACHC,KAAK,CAAA;EACLC,KAAK,CAAA;EACLC,GAAG,CAAA;EACHC,QAAQ,CAAA;AAER,EAAA,OAAOC,gBAAgB,GAAG,CAAC,OAAO,CAAC,CAAA;EAEnC,IACIC,KAAKA,GAAQ;AACf,IAAA,OAAOC,CAAC,CAAC,CAAC,IAAI,CAACZ,KAAK,CAAC,CAAC,CAAA;AACxB,GAAA;AAAC,EAAA;AAAAa,IAAAA,CAAA,CAAAC,IAAA,EAAA,OAAA,EAAA,CAHAC,QAAQ,CAAC,OAAO,CAAC,CAAA,CAAA,CAAA;AAAA,GAAA;AAIpB,CAAA;AAACC,oBAAA,CAAAC,QAAA,EA3BoBnB,sBAAsB,CAAA;;;;"}